#
# jhshin@amazon.com
#

AWSTemplateFormatVersion: 2010-09-09
Description: AWS Cloud Week

#Parameters:
Parameters:
  SSHKey:
    Description: The keypair that will be used to allow SSH access to the "aws" server
    Type: AWS::EC2::KeyPair::KeyName

# Mappings
Mappings:
  RegionalSettings:
   ap-northeast-2:
     clientAmi: ami-08ab3f7e72215fe91
     clientType: t3.micro
     name: Seoul
     az1: ap-northeast-2a
     az2: ap-northeast-2b
     az3: ap-northeast-2c
     az4: ap-northeast-2d
#   ap-northeast-1:
#     clientAmi: ami-0ce107ae7af2e92b5
#     clientType: t3.micro
#     name: Tokyo
#     az1: ap-northeast-1a
#     az2: ap-northeast-1b
#     az3: ap-northeast-1c
  NetworkSettings:
    global:
      onPremVpcCidr: 10.10.0.0/16
      onPremSubPubCidr: 10.10.11.0/24
      onPremSubPriCidr1: 10.10.21.0/24
      onPremSubPriCidr2: 10.10.22.0/24
      onPremSubAttCidr: 10.10.100.0/24
      onPremServerPubIpAddress: 10.10.11.100
      onPremServerPriIpAddress: 10.10.21.100
      awsVpcCidr: 10.11.0.0/16
      awsSubPubCidr: 10.11.11.0/24
      awsSubPriCidr1: 10.11.21.0/24
      awsSubPriCidr2: 10.11.22.0/24
      awsSubAttCidr: 10.11.100.0/24
      awsServerPubIpAddress: 10.11.11.100
      awsServerPriIpAddress: 10.11.21.100
      vpcPeeringCidr: 10.0.0.0/8
      vpcLocalCidr: 10.0.0.0/0
      vpcPublicCidr: 0.0.0.0/0

Resources:

# On-Prem VPC
  OnPremVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !FindInMap [ NetworkSettings, global, onPremVpcCidr ]
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        -
          Key: "Name"
          Value: "On-Prem VPC(Source VPC)"

# Public Subnet
  OnPremPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !FindInMap [ NetworkSettings, global, onPremSubPubCidr ]
      AvailabilityZone: !FindInMap [ RegionalSettings, !Ref "AWS::Region", az1 ]
      MapPublicIpOnLaunch: true
      VpcId: !Ref OnPremVPC
      Tags:
        -
          Key: "Name"
          Value: "On-Prem Public Subnet"

# Private Subnet
  OnPremPrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !FindInMap [ NetworkSettings, global, onPremSubPriCidr1 ]
      AvailabilityZone: !FindInMap [ RegionalSettings, !Ref "AWS::Region", az1 ]
      MapPublicIpOnLaunch: false
      VpcId: !Ref OnPremVPC
      Tags:
        -
          Key: "Name"
          Value: "On-Prem Private Subnet1"

  OnPremPrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !FindInMap [ NetworkSettings, global, onPremSubPriCidr2 ]
      AvailabilityZone: !FindInMap [ RegionalSettings, !Ref "AWS::Region", az3 ]
      MapPublicIpOnLaunch: false
      VpcId: !Ref OnPremVPC
      Tags:
        -
          Key: "Name"
          Value: "On-Prem Private Subnet2"

# SSM Attach Subnet
  OnPremAttachSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref OnPremVPC
      CidrBlock: !FindInMap [ NetworkSettings, global, onPremSubAttCidr ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: "On-Prem Attach Subnet"

# Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: On-Prem Internet Gateway

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref OnPremVPC

# NAT EIP
  NatGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: OnPremVPC

# NAT Gateway
  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref OnPremPublicSubnet
      Tags:
        - Key: Name
          Value: On-Prem NAT Gateway

# Public Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref OnPremVPC
      Tags:
        - Key: Name
          Value: On-Prem Public Subnet Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PeeringRoute0:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: !FindInMap [ NetworkSettings, global, awsVpcCidr ]
      RouteTableId: !Ref PublicRouteTable
      VpcPeeringConnectionId: !Ref VPCPeeringConnection

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref OnPremPublicSubnet

# Private Route Table
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref OnPremVPC
      Tags:
        - Key: Name
          Value: On-Prem Private Subnet Routes

  DefaultPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PeeringRoute1:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: !FindInMap [ NetworkSettings, global, awsVpcCidr ]
      RouteTableId: !Ref PrivateRouteTable
      VpcPeeringConnectionId: !Ref VPCPeeringConnection

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref OnPremPrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref OnPremPrivateSubnet2

# Attach Route Table
  AttachRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref OnPremVPC
      Tags:
        - Key: Name
          Value: On-Prem Attach Subnet Routes

  AttachSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref AttachRouteTable
      SubnetId: !Ref OnPremAttachSubnet

# Instance Security Group
  OnPremSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: On-prem VPC Security Group
      GroupName: OnPremSG-Servers
      SecurityGroupIngress:
        - IpProtocol: tcp
          CidrIp: !FindInMap [ NetworkSettings, global, vpcPublicCidr ]
          FromPort: 22
          ToPort: 22
        - IpProtocol: icmp
          CidrIp: !FindInMap [ NetworkSettings, global, vpcPeeringCidr ]
          FromPort: "-1"
          ToPort: "-1"
      VpcId: !Ref OnPremVPC
      Tags:
        -
          Key: "Name"
          Value: On-Prem Servers Security Group
  OnPremSGIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref OnPremSG
      IpProtocol: -1
      SourceSecurityGroupId: !GetAtt OnPremSG.GroupId

# Aurora Security Group
  AuroraSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: On-prem Aurora Security Group
      GroupName: prv-dl-aurora-sg
      SecurityGroupIngress:
        - IpProtocol: tcp
          SourceSecurityGroupId: !GetAtt OnPremSG.GroupId
          FromPort: 3306
          ToPort: 3306
        - IpProtocol: tcp
          FromPort: "0"
          ToPort: "65535"
          CidrIp: !FindInMap [ NetworkSettings, global, vpcPeeringCidr ]
      VpcId: !Ref OnPremVPC
      Tags:
        -
          Key: "Name"
          Value: On-Prem Aurora Security Group
  AuroraSGIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref AuroraSG
      IpProtocol: -1
      SourceSecurityGroupId: !GetAtt AuroraSG.GroupId

# Endpoint Security Group
  EndpointSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Open-up ports for All Network
      GroupName: OnPremSG-Endpoints
      VpcId: !Ref OnPremVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "0"
          ToPort: "65535"
          CidrIp: !FindInMap [ NetworkSettings, global, vpcLocalCidr ]
        - IpProtocol: udp
          FromPort: "0"
          ToPort: "65535"
          CidrIp: !FindInMap [ NetworkSettings, global, vpcLocalCidr ]
      Tags:
        - Key: Name
          Value: On-Prem Endpoints Security Group

# ssm, ssmmessages Endpoints
  SSMEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref OnPremVPC
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssm"
      VpcEndpointType: Interface
      PrivateDnsEnabled: True
      SubnetIds:
        - Ref: OnPremAttachSubnet
      SecurityGroupIds:
        - Ref: EndpointSG

  SSMMEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref OnPremVPC
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssmmessages"
      VpcEndpointType: Interface
      PrivateDnsEnabled: True
      SubnetIds:
        - Ref: OnPremAttachSubnet
      SecurityGroupIds:
        - Ref: EndpointSG      

# Session Manager ServerRole
  EC2ServerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: On-Prem-SSMRole
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref EC2ServerRole

  OnPremServer:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: !GetAtt OnPremPublicSubnet.AvailabilityZone
      ImageId: !FindInMap [ RegionalSettings, !Ref "AWS::Region", clientAmi ]
      InstanceType: !FindInMap [ RegionalSettings, !Ref "AWS::Region", clientType ]
      PrivateIpAddress: !FindInMap [ NetworkSettings, global, onPremServerPubIpAddress ]
      KeyName: !Ref SSHKey
      SecurityGroupIds:
        - !GetAtt OnPremSG.GroupId
      IamInstanceProfile: !Ref InstanceProfile
      SubnetId: !Ref OnPremPublicSubnet
      Tags:
        -
          Key: "Name"
          Value: !Sub OnPrem-Server
      BlockDeviceMappings: 
        - DeviceName: "/dev/xvda"
          Ebs: 
            VolumeType: "gp2"
            VolumeSize: "20"
            DeleteOnTermination: "false"
            Encrypted: "false"
      UserData:
        Fn::Base64:
          Fn::Sub: |
            #!/bin/sh
            sudo yum -y update
            sudo yum -y install yum-utils 
            sudo yum -y install mysql
            exit

# AWS VPC
  AWSVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !FindInMap [ NetworkSettings, global, awsVpcCidr ]
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        -
          Key: "Name"
          Value: "AWS VPC(Target VPC)"

# Public Subnet
  AWSPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !FindInMap [ NetworkSettings, global, awsSubPubCidr ]
      MapPublicIpOnLaunch: true
      VpcId: !Ref AWSVPC
      Tags:
        -
          Key: "Name"
          Value: "AWS Public Subnet"

# Private Subnet
  AWSPrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !FindInMap [ NetworkSettings, global, awsSubPriCidr1 ]
      AvailabilityZone: !FindInMap [ RegionalSettings, !Ref "AWS::Region", az1 ]
      MapPublicIpOnLaunch: false
      VpcId: !Ref AWSVPC
      Tags:
        -
          Key: "Name"
          Value: "AWS Private Subnet1"

  AWSPrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !FindInMap [ NetworkSettings, global, awsSubPriCidr2 ]
      AvailabilityZone: !FindInMap [ RegionalSettings, !Ref "AWS::Region", az3 ]
      MapPublicIpOnLaunch: false
      VpcId: !Ref AWSVPC
      Tags:
        -
          Key: "Name"
          Value: "AWS Private Subnet2"

# SSM Attach Subnet
  AWSAttachSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AWSVPC
      CidrBlock: !FindInMap [ NetworkSettings, global, awsSubAttCidr ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: "AWS Attach Subnet"

# Internet Gateway
  AWSInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: AWS Internet Gateway

  AWSInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref AWSInternetGateway
      VpcId: !Ref AWSVPC

# NAT EIP
  AWSNatGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: AWSInternetGatewayAttachment
    Properties:
      Domain: AWSVPC

# NAT Gateway
  AWSNatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt AWSNatGatewayEIP.AllocationId
      SubnetId: !Ref AWSPublicSubnet
      Tags:
        - Key: Name
          Value: AWS NAT Gateway

# Public Route Table
  AWSPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref AWSVPC
      Tags:
        - Key: Name
          Value: AWS Public Subnet Routes

  AWSDefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AWSInternetGatewayAttachment
    Properties:
      RouteTableId: !Ref AWSPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref AWSInternetGateway

  AWSPeeringRoute0:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: !FindInMap [ NetworkSettings, global, onPremVpcCidr ]
      RouteTableId: !Ref AWSPublicRouteTable
      VpcPeeringConnectionId: !Ref VPCPeeringConnection

  AWSPublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref AWSPublicRouteTable
      SubnetId: !Ref AWSPublicSubnet

# Private Route Table
  AWSPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref AWSVPC
      Tags:
        - Key: Name
          Value: AWS Private Subnet Routes

  AWSDefaultPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref AWSPrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref AWSNatGateway

  AWSPeeringRoute1:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: !FindInMap [ NetworkSettings, global, onPremVpcCidr ]
      RouteTableId: !Ref AWSPrivateRouteTable
      VpcPeeringConnectionId: !Ref VPCPeeringConnection

  AWSPrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref AWSPrivateRouteTable
      SubnetId: !Ref AWSPrivateSubnet1

  AWSPrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref AWSPrivateRouteTable
      SubnetId: !Ref AWSPrivateSubnet2

# Attach Route Table
  AWSAttachRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref AWSVPC
      Tags:
        - Key: Name
          Value: AWS Attach Subnet Routes

  AWSAttachSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref AWSAttachRouteTable
      SubnetId: !Ref AWSAttachSubnet

# Instance Security Group
  AWSSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: AWS VPC Security Group
      GroupName: AWSSG-Servers
      SecurityGroupIngress:
        - IpProtocol: tcp
          CidrIp: !FindInMap [ NetworkSettings, global, vpcPublicCidr ]
          FromPort: 22
          ToPort: 22
        - IpProtocol: icmp
          CidrIp: !FindInMap [ NetworkSettings, global, vpcPeeringCidr ]
          FromPort: "-1"
          ToPort: "-1"
      VpcId: !Ref AWSVPC
      Tags:
        -
          Key: "Name"
          Value: AWS Servers Security Group
  AWSSGIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref AWSSG
      IpProtocol: -1
      SourceSecurityGroupId: !GetAtt AWSSG.GroupId

## Glue Security Group
  GlueSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Glue Security Group
      GroupName: prv-dl-glue-sg
      VpcId: !Ref AWSVPC
      SecurityGroupIngress:
        - IpProtocol: -1
          CidrIp: !FindInMap [ NetworkSettings, global, awsVpcCidr ]
      Tags:
        -
          Key: "Name"
          Value: AWS Glue Security Group
  GlueSGIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref GlueSG
      IpProtocol: -1
      SourceSecurityGroupId: !GetAtt GlueSG.GroupId

## Redshift Security Group
  RedshiftSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: AWS Redshift Security Group
      GroupName: prv-dl-redshift-sg
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "0"
          ToPort: "65535"
          CidrIp: !FindInMap [ NetworkSettings, global, awsVpcCidr ]
      VpcId: !Ref AWSVPC
      Tags:
        - Key: "Name"
          Value: AWS Redshift Security Group
  RedshiftSGIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref RedshiftSG
      IpProtocol: -1
      SourceSecurityGroupId: !GetAtt GlueSG.GroupId

## QuickSight Security Group
  QuickSightSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: AWS QuickSight Security Group
      GroupName: prv-dl-quicksight-sg
      SecurityGroupIngress:
        - IpProtocol: -1
          CidrIp: !FindInMap [ NetworkSettings, global, awsVpcCidr ]
      VpcId: !Ref AWSVPC
      Tags:
        - Key: "Name"
          Value: AWS QuickSight Security Group

# Endpoint Security Group
  AWSEndpointSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Open-up ports for All Network
      GroupName: AWSSG-Endpoints
      VpcId: !Ref AWSVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "0"
          ToPort: "65535"
          CidrIp: !FindInMap [ NetworkSettings, global, vpcLocalCidr ]
        - IpProtocol: udp
          FromPort: "0"
          ToPort: "65535"
          CidrIp: !FindInMap [ NetworkSettings, global, vpcLocalCidr ]
      Tags:
        - Key: Name
          Value: AWS Endpoints Security Group

# ssm, ssmmessages Endpoints
  AWSSSMEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref AWSVPC
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssm"
      VpcEndpointType: Interface
      PrivateDnsEnabled: True
      SubnetIds:
        - Ref: AWSAttachSubnet
      SecurityGroupIds:
        - Ref: AWSEndpointSG

  AWSSSMMEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref AWSVPC
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssmmessages"
      VpcEndpointType: Interface
      PrivateDnsEnabled: True
      SubnetIds:
        - Ref: AWSAttachSubnet
      SecurityGroupIds:
        - Ref: AWSEndpointSG      

# Session Manager ServerRole
  AWSEC2ServerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: AWS-SSMRole
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole

  AWSInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref AWSEC2ServerRole

  AWSServer:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: !GetAtt AWSPublicSubnet.AvailabilityZone
      ImageId: !FindInMap [ RegionalSettings, !Ref "AWS::Region", clientAmi ]
      InstanceType: !FindInMap [ RegionalSettings, !Ref "AWS::Region", clientType ]
      PrivateIpAddress: !FindInMap [ NetworkSettings, global, awsServerPubIpAddress ]
      KeyName: !Ref SSHKey
      SecurityGroupIds:
        - !GetAtt AWSSG.GroupId
      IamInstanceProfile: !Ref AWSInstanceProfile
      SubnetId: !Ref AWSPublicSubnet
      Tags:
        -
          Key: "Name"
          Value: !Sub AWS-Server
      BlockDeviceMappings: 
        - DeviceName: "/dev/xvda"
          Ebs: 
            VolumeType: "gp2"
            VolumeSize: "20"
            DeleteOnTermination: "false"
            Encrypted: "false"

# VPC Peering
  VPCPeeringConnection:
    Type: 'AWS::EC2::VPCPeeringConnection'
    Properties:
      VpcId: !Ref OnPremVPC
      PeerVpcId: !Ref AWSVPC

#Outputs
Outputs:
  sourceVpcCidr:
    Description: "Source VPC CidrBlock"
    Value: !FindInMap [ NetworkSettings, global, onPremVpcCidr ]
  targetVpcCidr:
    Description: "Target VPC CidrBlock"
    Value: !FindInMap [ NetworkSettings, global, awsVpcCidr ]



